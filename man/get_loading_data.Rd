% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_loading_data.R
\name{get_loading_data}
\alias{get_loading_data}
\alias{get_loading_data.recipe}
\alias{get_loading_data.workflow}
\title{Obtain and format PCA component data from a recipe or workflow}
\usage{
get_loading_data(x, ...)

\method{get_loading_data}{recipe}(x, ..., id, type = "pca")

\method{get_loading_data}{workflow}(x, ..., id = NULL, type = "pca")
}
\arguments{
\item{x}{A prepped recipe or fitted workflow that uses a recipe. The recipe
must have used at least one \code{\link[recipes:step_pca]{recipes::step_pca()}} (or \code{\link[recipes:step_pls]{recipes::step_pls()}}).}

\item{...}{An optional series of conditional statements used to filter the
PCA data before plotting. See Details below.}

\item{id}{A single numeric or character value that is used to pick the step
with the PCA results. If a single \code{\link[recipes:step_pca]{recipes::step_pca()}} (or
\code{\link[recipes:step_pls]{recipes::step_pls()}}) was used, this argument is ignored. \emph{Note}: if used,
\code{id} must be named.}

\item{type}{A character value ("pca" or "pls") for the type of step to use.}
}
\value{
A tibble that mirrors the \code{tidy()} method for those steps. The data
also includes a numeric \code{component_number} and may have been changed due to
any filters supplied to \code{...}.
}
\description{
Obtain and format PCA component data from a recipe or workflow
}
\examples{
library(recipes)
library(parsnip)
library(workflows)
library(ggplot2)

data("Chicago", package = "modeldata")

theme_set(theme_minimal())

## -----------------------------------------------------------------------------

train_pca <-
  recipe(ridership ~ ., data = Chicago \%>\% dplyr::select(1:21)) \%>\%
  step_center(all_predictors()) \%>\%
  step_scale(all_predictors()) \%>\%
  step_pca(all_predictors())

# or when used in a workflow
lm_workflow <-
  workflow() \%>\%
  add_model(linear_reg() \%>\% set_engine("lm")) \%>\%
  add_recipe(train_pca)

## -----------------------------------------------------------------------------

train_pca <- prep(train_pca)

get_loading_data(train_pca, component_number <= 3)

get_loading_data(train_pca, component_number <= 3, value > 0)

## -----------------------------------------------------------------------------

lm_workflow <- lm_workflow \%>\% fit(data = Chicago)

get_loading_data(lm_workflow, component_number <= 3)

}
